# In this scenario:
# - There is one order of two shipments.
# - The order will be updated while it is being fulfilled.
#   - Shipments will be evaluated against the updated order.
#   - Teams should respond by filling the updated order instead of the original order.
# - The gripper will become faulty at various instances:
#   - A disk_part will be dropped in the storage bin.
#   - A gasket_part will be dropped in the shipping box.
# - Communication with the sensors will be lost temporarily.
#   - Teams should continue to fill the order as usual during this time.

options:
  insert_models_over_bins: true
  fill_demo_shipment: false
  start_box_at_belt_center: false
  gazebo_state_logging: true

time_limit: 500

orders:
  order_0:
    announcement_condition: time
    announcement_condition_value: 0.0
    shipment_count: 2
    products:
      part_0:
        type: piston_rod_part
        pose:
          xyz: [0.1, -0.1, 0]
          rpy: [0, 0, 0]
      part_1:
        type: gear_part
        pose:
          xyz: [-0.1, 0, 0]
          rpy: [0, 0, 'pi']
      part_2:
        type: gear_part
        pose:
          xyz: [-0.1, 0.15, 0]
          rpy: [0, 0, 0]
  order_0_update_0:
    announcement_condition: wanted_products
    announcement_condition_value: 2
    shipment_count: 2
    products:
      part_0:
        type: disk_part
        pose:
          xyz: [0.1, -0.1, 0]
          rpy: [0, 0, 0]
      part_1:
        type: gear_part
        pose:
          xyz: [-0.1, 0, 0]
          rpy: [0, 0, 'pi']
      part_2:
        type: gear_part
        pose:
          xyz: [-0.1, 0.15, 0]
          rpy: [0, 0, 0]
      part_3:
        type: gasket_part
        pose:
          xyz: [0.1, 0.15, 0]
          rpy: [0, 0, 0]

models_over_bins:
  bin5:
    models:
      gear_part:
        xyz_start: [0.1, 0.05, 0.0]
        xyz_end: [0.3, 0.37, 0.0]
        rpy: [0, 0, 0]
        num_models_x: 2
        num_models_y: 3
  bin2:
    models:
      gasket_part:
        xyz_start: [0.05, 0.1, 0.0]
        xyz_end: [0.2, 0.37, 0.0]
        rpy: [0, 0, 'pi/4']
        num_models_x: 1
        num_models_y: 2
  bin3:
    models:
      disk_part:
        xyz_start: [0.1, 0.05, 0.0]
        xyz_end: [0.25, 0.35, 0.0]
        rpy: [0, 0, '-pi/4']
        num_models_x: 1
        num_models_y: 2
  bin1:
    models:
      piston_rod_part:
        xyz_start: [0.05, 0.1, 0.0]
        xyz_end: [0.25, 0.35, 0.0]
        rpy: [0, 0, 'pi/4']
        num_models_x: 2
        num_models_y: 2

sensor_blackout:
  product_count: 2
  duration: 30

drops:
  drop_regions:
    shipping_box_0_impeding:
      frame: shipping_box_0::box_base
      min:
        xyz: [-0.15, -0.35, 0.0]
      max:
        xyz: [0.15, 0.35, 0.5]
      destination:
        xyz: [0.0, 0.15, 0.05]
        rpy: [0, 0, 0.6]
      product_type_to_drop: gasket_part
    shipping_box_1_impeding:
      frame: shipping_box_1::box_base
      min:
        xyz: [-0.15, -0.35, 0.0]
      max:
        xyz: [0.15, 0.35, 0.5]
      destination:
        xyz: [0.0, 0.15, 0.05]
        rpy: [0, 0, 0.6]
      product_type_to_drop: gasket_part
    shipping_box_2_impeding:
      frame: shipping_box_1::box_base
      min:
        xyz: [-0.15, -0.35, 0.0]
      max:
        xyz: [0.15, 0.35, 0.5]
      destination:
        xyz: [0.0, 0.15, 0.05]
        rpy: [0, 0, 0.6]
      product_type_to_drop: gasket_part
    bin3_reachable:
      min:
        xyz: [-0.65, 0.7, 0.7]
      max:
        xyz: [-0.55, 1.60, 1.3]
      destination:
        xyz: [-0.7, 1.12, 0.76]
        rpy: [0, 0, 0.4]
      product_type_to_drop: disk_part
